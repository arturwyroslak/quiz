// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  PARTNER
  COMPANY
  TEAM_MEMBER
  ADMIN
}

enum LeadStatus {
  PENDING
  CONTACTED
  CONVERTED
  REJECTED
}

enum TeamMemberStatus {
  ACTIVE
  INACTIVE
}

model User {
  id                    String      @id @default(cuid())
  email                 String      @unique
  name                  String?
  password              String
  accountType           AccountType @default(PARTNER)
  isVerified            Boolean     @default(false)
  isActive              Boolean     @default(true)
  verificationToken     String?     @unique
  resetPasswordToken    String?     @unique
  resetPasswordExpires  DateTime?
  referralCode          String?     @unique
  referredById          String?     // ID użytkownika, który polecił tego użytkownika
  nip                   String?
  regon                 String?
  phone                 String?
  address               String?
  companyName           String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  // Relations
  leads                 Lead[]      @relation("PartnerLeads")
  teamMembers           TeamMember[] @relation("CompanyTeamMembers")
  reports               Report[]
  notifications         UserNotification?
  referredBy            User?       @relation("UserReferrals", fields: [referredById], references: [id])
  referrals             User[]      @relation("UserReferrals")
  quizSessions          QuizSession[]

  @@map("users")
}

model Lead {
  id                    String      @id @default(cuid())
  firstName             String
  lastName              String
  email                 String
  phone                 String?
  address               String?
  preferences           String?
  status                LeadStatus  @default(PENDING)
  estimatedValue        Float?
  consentContact        Boolean     @default(false)
  consentPromoMaterials Boolean     @default(false)
  partnerId             String
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  // Relations
  partner               User        @relation("PartnerLeads", fields: [partnerId], references: [id], onDelete: Cascade)

  @@map("leads")
}

model TeamMember {
  id          String            @id @default(cuid())
  name        String
  email       String            @unique
  phone       String?
  position    String?
  status      TeamMemberStatus  @default(ACTIVE)
  companyId   String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  company     User              @relation("CompanyTeamMembers", fields: [companyId], references: [id], onDelete: Cascade)

  @@map("team_members")
}

model Report {
  id          String    @id @default(cuid())
  title       String
  type        String
  data        Json
  generatedBy String
  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [generatedBy], references: [id], onDelete: Cascade)

  @@map("reports")
}

model UserNotification {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailNewLeads         Boolean  @default(true)
  emailLeadUpdates      Boolean  @default(true)
  emailUserProgram      Boolean  @default(true)
  emailMarketing        Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notifications")
}

enum QuizType {
  STYLE
  FUNCTIONAL
}

model Quiz {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        QuizType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  questions   Question[]
  sessions    QuizSession[]

  @@map("quizzes")
}

model QuizSession {
  id           String    @id @default(cuid())
  userId       String?
  quizId       String
  isCompleted  Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  quiz         Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user         User?     @relation(fields: [userId], references: [id])
  answers      Answer[]
  styleScores  StyleScore[]
  detailScores DetailScore[]
  rooms        QuizSessionRoom[]
  comments     Comment[]

  @@map("quiz_sessions")
}

model Question {
  id             String   @id @default(cuid())
  questionCode   String   @unique // Human-readable ID, e.g., "lifestyle_1"
  text           String
  description    String? // Optional description for more context
  category       String // e.g., "Styl życia i nawyki użytkownika"
  type           String // e.g., 'single-choice', 'multiple-choice', 'slider', 'text', 'image-choice', 'trade-off'
  options        Json? // Structured JSON for options, e.g., { choices: [], referencePoints: [] }
  quizId         String
  branchingLogic  Json? // Structured JSON for advanced branching, e.g., { conditions: [], nextQuestionId: "" }
  relevantRooms   String?
  tags            String? // Tags for more granular logic
  order           Int?     // Optional field for explicit question ordering
  createdAt       DateTime @default(now())
  updatedAt      DateTime @updatedAt
  quiz           Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers        Answer[]

  @@map("questions")
}

model Answer {
  id         String   @id @default(cuid())
  sessionId  String
  questionId String
  value      Json
  createdAt  DateTime @default(now())
  session    QuizSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  question   Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model Style {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  images      StyleImage[]
  scores      StyleScore[]

  @@map("styles")
}

model StyleImage {
  id      String @id @default(cuid())
  url     String
  styleId String
  room    String?

  style    Style      @relation(fields: [styleId], references: [id], onDelete: Cascade)
  comments Comment[]
  tags     ImageTag[]

  @@map("style_images")
}

enum CommentSentiment {
  positive
  negative
  neutral
}

model Comment {
  id           String   @id @default(cuid())
  text         String
  sessionId    String
  styleImageId String
  x            Float?
  y            Float?
  w            Float?
  h            Float?
  sentiment    CommentSentiment @default(neutral)
  imageTagId   String?
  createdAt    DateTime @default(now())

  session    QuizSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  styleImage StyleImage  @relation(fields: [styleImageId], references: [id], onDelete: Cascade)
  imageTag   ImageTag?   @relation(fields: [imageTagId], references: [id], onDelete: SetNull)

  @@map("comments")
}

model StyleScore {
  id        String @id @default(cuid())
  sessionId String
  styleId   String
  score     Int

  session QuizSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  style   Style       @relation(fields: [styleId], references: [id], onDelete: Cascade)

  @@unique([sessionId, styleId])
  @@map("style_scores")
}

model Room {
  id   String @id @default(cuid())
  name String @unique

  quizSessions QuizSessionRoom[]

  @@map("rooms")
}

model QuizSessionRoom {
  id        String @id @default(cuid())
  sessionId String
  roomId    String

  session QuizSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  room    Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("quiz_session_rooms")
}

model Detail {
  id        String   @id @default(cuid())
  name      String
  category  String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags   ImageTag[]
  scores DetailScore[]

  @@map("details")
}

model ImageTag {
  id           String @id @default(cuid())
  styleImageId String
  detailId     String
  x            Float
  y            Float
  width        Float
  height       Float

  styleImage StyleImage @relation(fields: [styleImageId], references: [id], onDelete: Cascade)
  detail     Detail     @relation(fields: [detailId], references: [id], onDelete: Cascade)
  comments   Comment[]

  @@unique([styleImageId, detailId, x, y])
  @@map("image_tags")
}

model DetailScore {
  id        String @id @default(cuid())
  sessionId String
  detailId  String
  score     Int

  session QuizSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  detail  Detail      @relation(fields: [detailId], references: [id], onDelete: Cascade)

  @@unique([sessionId, detailId])
  @@map("detail_scores")
}
